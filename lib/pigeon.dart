// Autogenerated from Pigeon (v0.1.15), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import
// @dart = 2.8
import 'dart:async';
import 'package:flutter/services.dart';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

class ChannelRequest {
  int id;
  String method;
  RequestPayload payload;
  RequestOptions options;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['id'] = id;
    pigeonMap['method'] = method;
    pigeonMap['payload'] = payload == null ? null : payload._toMap();
    pigeonMap['options'] = options == null ? null : options._toMap();
    return pigeonMap;
  }
  // ignore: unused_element
  static ChannelRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final ChannelRequest result = ChannelRequest();
    result.id = pigeonMap['id'];
    result.method = pigeonMap['method'];
    result.payload = pigeonMap['payload'] != null ? RequestPayload._fromMap(pigeonMap['payload']) : null;
    result.options = pigeonMap['options'] != null ? RequestOptions._fromMap(pigeonMap['options']) : null;
    return result;
  }
}

class RequestPayload {
  String url;
  String body;
  Credential credential;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['url'] = url;
    pigeonMap['body'] = body;
    pigeonMap['credential'] = credential == null ? null : credential._toMap();
    return pigeonMap;
  }
  // ignore: unused_element
  static RequestPayload _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final RequestPayload result = RequestPayload();
    result.url = pigeonMap['url'];
    result.body = pigeonMap['body'];
    result.credential = pigeonMap['credential'] != null ? Credential._fromMap(pigeonMap['credential']) : null;
    return result;
  }
}

class Credential {
  String username;
  String password;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['username'] = username;
    pigeonMap['password'] = password;
    return pigeonMap;
  }
  // ignore: unused_element
  static Credential _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final Credential result = Credential();
    result.username = pigeonMap['username'];
    result.password = pigeonMap['password'];
    return result;
  }
}

class RequestOptions {
  int timeout;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['timeout'] = timeout;
    return pigeonMap;
  }
  // ignore: unused_element
  static RequestOptions _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final RequestOptions result = RequestOptions();
    result.timeout = pigeonMap['timeout'];
    return result;
  }
}

class ChannelResponse {
  int id;
  String status;
  Uint8List result;
  Error error;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['id'] = id;
    pigeonMap['status'] = status;
    pigeonMap['result'] = result;
    pigeonMap['error'] = error == null ? null : error._toMap();
    return pigeonMap;
  }
  // ignore: unused_element
  static ChannelResponse _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final ChannelResponse result = ChannelResponse();
    result.id = pigeonMap['id'];
    result.status = pigeonMap['status'];
    result.result = pigeonMap['result'];
    result.error = pigeonMap['error'] != null ? Error._fromMap(pigeonMap['error']) : null;
    return result;
  }
}

class Error {
  String error;
  int code;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['error'] = error;
    pigeonMap['code'] = code;
    return pigeonMap;
  }
  // ignore: unused_element
  static Error _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final Error result = Error();
    result.error = pigeonMap['error'];
    result.code = pigeonMap['code'];
    return result;
  }
}

class NetworkChannelApiRequest {
  Future<void> sendRequest(ChannelRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.NetworkChannelApiRequest.sendRequest', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
}

abstract class NetworkChannelApiResponse {
  void onResult(ChannelResponse arg);
  static void setup(NetworkChannelApiResponse api) {
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.NetworkChannelApiResponse.onResult', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {

        channel.setMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final ChannelResponse input = ChannelResponse._fromMap(mapMessage);
          api.onResult(input);
        });
      }
    }
  }
}

