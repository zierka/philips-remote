// Autogenerated from Pigeon (v0.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/services.dart';

class ChannelRequest {
  int? id;
  String? method;
  RequestPayload? payload;
  RequestOptions? options;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['id'] = id;
    pigeonMap['method'] = method;
    pigeonMap['payload'] = payload == null ? null : payload!.encode();
    pigeonMap['options'] = options == null ? null : options!.encode();
    return pigeonMap;
  }

  static ChannelRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ChannelRequest()
      ..id = pigeonMap['id'] as int?
      ..method = pigeonMap['method'] as String?
      ..payload = pigeonMap['payload'] != null
          ? RequestPayload.decode(pigeonMap['payload']!)
          : null
      ..options = pigeonMap['options'] != null
          ? RequestOptions.decode(pigeonMap['options']!)
          : null;
  }
}

class RequestPayload {
  String? url;
  String? body;
  Credential? credential;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['url'] = url;
    pigeonMap['body'] = body;
    pigeonMap['credential'] = credential == null ? null : credential!.encode();
    return pigeonMap;
  }

  static RequestPayload decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return RequestPayload()
      ..url = pigeonMap['url'] as String?
      ..body = pigeonMap['body'] as String?
      ..credential = pigeonMap['credential'] != null
          ? Credential.decode(pigeonMap['credential']!)
          : null;
  }
}

class Credential {
  String? username;
  String? password;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['username'] = username;
    pigeonMap['password'] = password;
    return pigeonMap;
  }

  static Credential decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return Credential()
      ..username = pigeonMap['username'] as String?
      ..password = pigeonMap['password'] as String?;
  }
}

class RequestOptions {
  int? timeout;
  String? protocol;
  String? ip;
  int? port;
  int? apiVersion;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['timeout'] = timeout;
    pigeonMap['protocol'] = protocol;
    pigeonMap['ip'] = ip;
    pigeonMap['port'] = port;
    pigeonMap['apiVersion'] = apiVersion;
    return pigeonMap;
  }

  static RequestOptions decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return RequestOptions()
      ..timeout = pigeonMap['timeout'] as int?
      ..protocol = pigeonMap['protocol'] as String?
      ..ip = pigeonMap['ip'] as String?
      ..port = pigeonMap['port'] as int?
      ..apiVersion = pigeonMap['apiVersion'] as int?;
  }
}

class ChannelResponse {
  String? status;
  Uint8List? result;
  NetworkError? error;
  ChannelRequest? request;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['status'] = status;
    pigeonMap['result'] = result;
    pigeonMap['error'] = error == null ? null : error!.encode();
    pigeonMap['request'] = request == null ? null : request!.encode();
    return pigeonMap;
  }

  static ChannelResponse decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ChannelResponse()
      ..status = pigeonMap['status'] as String?
      ..result = pigeonMap['result'] as Uint8List?
      ..error = pigeonMap['error'] != null
          ? NetworkError.decode(pigeonMap['error']!)
          : null
      ..request = pigeonMap['request'] != null
          ? ChannelRequest.decode(pigeonMap['request']!)
          : null;
  }
}

class NetworkError {
  String? error;
  int? code;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['error'] = error;
    pigeonMap['code'] = code;
    return pigeonMap;
  }

  static NetworkError decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return NetworkError()
      ..error = pigeonMap['error'] as String?
      ..code = pigeonMap['code'] as int?;
  }
}

class AndroidLifecycleHelper {
  /// Constructor for [AndroidLifecycleHelper].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  AndroidLifecycleHelper({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  Future<void> sendToBackground() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AndroidLifecycleHelper.sendToBackground', const StandardMessageCodec(), binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}

class NetworkChannelApiRequest {
  /// Constructor for [NetworkChannelApiRequest].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NetworkChannelApiRequest({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  Future<void> sendRequest(ChannelRequest arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NetworkChannelApiRequest.sendRequest', const StandardMessageCodec(), binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}

abstract class NetworkChannelApiResponse {
  void onResult(ChannelResponse arg);
  static void setup(NetworkChannelApiResponse? api) {
    {
      const BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NetworkChannelApiResponse.onResult', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.NetworkChannelApiResponse.onResult was null. Expected ChannelResponse.');
          final ChannelResponse input = ChannelResponse.decode(message!);
          api.onResult(input);
          return;
        });
      }
    }
  }
}
